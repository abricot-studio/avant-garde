import { useDisclosure } from '@chakra-ui/hooks'
import { faExternalLinkAlt } from '@fortawesome/free-solid-svg-icons'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import {
  getExplorerTransactionLink,
  isTestChain,
  useEthers,
} from '@usedapp/core'
import { utils } from 'ethers'
import Link from 'next/link'
import { useRouter } from 'next/router'
import React, { useEffect, useMemo } from 'react'
import { DiscordIcon, RedditIcon, TwitterIcon } from '../../assets/icons'
import config from '../../config'
import { useAuth } from '../../hooks/authContext'
import { useBurnPrice } from '../../hooks/burn'
import { useContract } from '../../hooks/contracts'
import { ImageGenerationStatus } from '../../hooks/generation'
import { useMint, useMintPrice, useTokenTotalSupply } from '../../hooks/mint'
import { bondingCurveSum, URLs } from '../../lib/constants'
import { getIpfsUrl } from '../../lib/ipfs'
import { useWalletSelector } from '../../lib/WalletSelector/context'
import { ImageFrame } from '../tokens/TokenImage'
import {
  ActionButton,
  Box,
  Button,
  Card,
  Flex,
  FormControl,
  FormHelperText,
  FormLabel,
  HStack,
  Image,
  Input,
  Link as CLink,
  Modal,
  ModalBody,
  ModalContent,
  ModalHeader,
  ModalOverlay,
  Text,
  useBreakpointValue,
  useToast,
  VStack,
} from '../ui'

export default function Generate() {
  const { isConnecting, open } = useWalletSelector()
  const { account, chainId } = useEthers()
  const { address: contractAddress } = useContract()
  const {
    accountToken,
    accountTokenFetching,
    inviteCode,
    setInviteCode,
    generateImage,
    isGeneratingImage,
    generationResult,
    errorGenerating,
  } = useAuth()
  const tokenMintPrice = useMintPrice()
  const tokenBurnPrice = useBurnPrice()
  const tokenTotalSupply = useTokenTotalSupply()
  const mobile = useBreakpointValue({ base: true, md: false, lg: false })

  const { mint, minted, isMinting, mintTx } = useMint()
  const router = useRouter()
  const toast = useToast()
  const { isOpen, onOpen, onClose } = useDisclosure()
  const handleChangeInviteCode = (event) => setInviteCode(event.target.value)

  const socialPostUrls = useMemo(() => {
    const tags =
      '#nftart #abstractart #art #NFTartist #generativeart #NFTCommunity #cryptoart'

    const messageTwitter = `I need an invite to access the @avantgardenft generator!üíò
Join the other AvantGardists to discover your personalized AvantGarde #NFT,üî•
generated by a deep-learning algorithmüé®

${tags}`
    const messageReddit = `I need an invite to access the @avantgardenft generator!üíò
Join the other AvantGardists to discover your personalized AvantGarde NFT,üî•
generated by a deep-learning algorithmüé®`
    const reddit = `https://reddit.com/submit?&title=${encodeURIComponent(
      messageReddit
    )}`
    const twitter = `https://twitter.com/intent/tweet?text=${encodeURIComponent(
      messageTwitter
    )}`
    const discord = URLs.discord

    const testnetPrefix = isTestChain(chainId) ? 'testnets.' : ''
    const opensea = `https://${testnetPrefix}opensea.io/assets/${contractAddress}`

    return {
      opensea,
      discord,
      twitter,
      reddit,
    }
  }, [contractAddress, chainId])

  useEffect(() => {
    if (errorGenerating && !!errorGenerating.message && config.inviteMode) {
      onOpen()
    } else {
      onClose()
    }
  }, [errorGenerating, onOpen, onClose])

  useEffect(() => {
    if (accountToken && !accountTokenFetching) {
      toast.closeAll()
      router.push(`/token/${accountToken.id}`)
    } else if (config.whitelistMode) {
      router.replace(`/`)
    }
  }, [accountToken, accountTokenFetching, router, toast])

  let cta
  if (accountToken || accountTokenFetching) {
    cta = <ActionButton isLoading loadingText="Loading token..." />
  } else if (minted) {
    cta = <ActionButton isDisabled>‚õè Minted successfully !</ActionButton>
  } else if (!account) {
    cta = (
      <ActionButton
        onClick={open}
        isLoading={isConnecting}
        loadingText="Connecting wallet..."
      >
        Connect wallet
      </ActionButton>
    )
  } else if (generationResult) {
    if (!tokenMintPrice) {
      cta = <ActionButton isLoading loadingText="Loading mint price..." />
    } else {
      cta = (
        <Box>
          <ActionButton
            onClick={() => mint(generationResult)}
            isLoading={isMinting}
            loadingText="‚õè Minting art..."
          >
            ‚õè Mint for{' '}
            <Text ml={2}>
              Œû{' '}
              {utils.formatEther(utils.parseUnits(tokenMintPrice.total, 'wei'))}
            </Text>
          </ActionButton>
        </Box>
      )
    }
  } else {
    cta = (
      <ActionButton
        onClick={() => generateImage(inviteCode)}
        isLoading={isGeneratingImage}
        loadingText="üé® Generating art..."
      >
        Generate yours
      </ActionButton>
    )
  }

  const imageSrc =
    generationResult &&
    generationResult.status === ImageGenerationStatus.SUCCESS &&
    getIpfsUrl(generationResult.ipfsHashImage)
  return (
    <Flex direction="column" align="center">
      <ImageFrame
        src={imageSrc}
        isLoading={isGeneratingImage}
        isQuestion={!isGeneratingImage && !generationResult}
      />

      <Box mt={8}>{cta}</Box>
      {!isGeneratingImage && !generationResult && (
        <>
          <Text
            align="center"
            pt={6}
            px={4}
            fontSize="0.8rem"
            fontWeight={600}
            fontFamily="Poppins, sans-serif"
          >
            You will get unique artwork based on your address, directly
            integrated and tradebale in
            <CLink
              href={socialPostUrls.opensea}
              isExternal
              _hover={{}}
              _active={{}}
              _focus={{}}
            >
              <Image
                src="/opensea.png"
                alt="opensea"
                h="1.2rem"
                w="5.2rem"
                display="inline"
                verticalAlign="bottom"
                pl={2}
              />
            </CLink>
          </Text>
        </>
      )}
      {isGeneratingImage && (
        <Card mt={8} mb={8}>
          <Flex direction="column" align="center" fontSize="sm">
            <Text align="center">Your image is being generated.</Text>
            <Text align="center">
              The processing can take up to 30 seconds.
            </Text>
            <Text align="center" fontWeight={500}>
              Each image is uniquely generated from your Ethereum address by a
              deep-learning algorithm{' '}
            </Text>

            <Link href="/about" passHref>
              <Button
                variant="outline"
                size="sm"
                _hover={{}}
                _active={{}}
                _focus={{}}
                mt={2}
              >
                Learn more
              </Button>
            </Link>
          </Flex>
        </Card>
      )}

      {tokenMintPrice &&
        tokenBurnPrice &&
        tokenTotalSupply &&
        !isGeneratingImage && (
          <Card my={8}>
            <Flex justifyContent="center" direction={mobile ? 'column' : 'row'}>
              <Flex>
                <HStack justifyContent="center">
                  <VStack justify="space-between" alignItems="center">
                    <Box fontWeight={600} alignSelf="flex-start">
                      üí∞ Price
                    </Box>
                    <Box fontWeight={600}>‚òïÔ∏è Platform fees</Box>
                  </VStack>
                  <VStack justify="space-between" alignItems="start">
                    <Box>
                      <Text>
                        Œû{' '}
                        {utils.formatEther(
                          utils.parseUnits(tokenMintPrice.currentPrice, 'wei')
                        )}
                      </Text>
                    </Box>
                    <Box>
                      <Text>
                        Œû{' '}
                        {utils.formatEther(
                          utils.parseUnits(tokenMintPrice.fees, 'wei')
                        )}
                      </Text>
                    </Box>
                  </VStack>
                </HStack>
              </Flex>
              <Flex pt={mobile ? 8 : 0} pl={!mobile ? 8 : 0}>
                <HStack justifyContent="center">
                  <VStack justify="space-between" alignItems="start">
                    <Box fontWeight={600}>üî• Burn price</Box>
                    <Box fontWeight={600}>üíé Total pool</Box>
                  </VStack>
                  <VStack
                    justify="flex-end"
                    alignItems="start"
                    pl={mobile ? 8 : 0}
                  >
                    <Box>
                      Œû{' '}
                      {utils.formatEther(
                        utils.parseUnits(tokenBurnPrice.currentPrice, 'wei')
                      )}
                    </Box>
                    <Box>
                      Œû {bondingCurveSum(tokenTotalSupply.current).toFixed(4)}
                    </Box>
                  </VStack>
                </HStack>
              </Flex>
            </Flex>
            {mintTx && (
              <Flex justifyContent="center" mt={2}>
                <CLink
                  href={getExplorerTransactionLink(mintTx, chainId)}
                  isExternal
                  color="#6B93FB"
                >
                  <Button
                    rightIcon={
                      <FontAwesomeIcon icon={faExternalLinkAlt} size="1x" />
                    }
                    variant="outline"
                    size="sm"
                    color="#6B93FB"
                    fontFamily='"Roboto Mono", sans-serif'
                    _hover={{}}
                    _active={{}}
                    _focus={{}}
                  >
                    Open Transaction
                  </Button>
                </CLink>
              </Flex>
            )}
          </Card>
        )}
      <Modal isOpen={isOpen} onClose={onClose} isCentered>
        <ModalOverlay />
        <ModalContent pb={4}>
          <ModalHeader textAlign="center">
            Want to become an AvantGardist?
          </ModalHeader>
          <ModalBody py={0}>
            <Flex align="center" direction="column">
              <Text pb={4}>
                Enter an invitation code to access the Generator and mint your
                unique piece of art.
              </Text>
              <FormControl id="invite-code" flex="column" align="center">
                <Flex>
                  <FormLabel>Invitation code</FormLabel>
                  {errorGenerating &&
                    errorGenerating.message !== 'not_invited' && (
                      <FormHelperText
                        flexGrow={1}
                        textAlign={'right'}
                        color="#FB6B6B"
                      >
                        {errorGenerating.message}
                      </FormHelperText>
                    )}
                </Flex>
                <Input
                  boxShadow="inset 0px 4px 20px rgba(129, 129, 129, 0.15)"
                  borderRadius="md"
                  px={4}
                  value={inviteCode}
                  onChange={handleChangeInviteCode}
                  onKeyDown={(e) =>
                    e.key === 'Enter' &&
                    inviteCode !== '' &&
                    generateImage(inviteCode)
                  }
                />
                <ActionButton
                  onClick={() => generateImage(inviteCode)}
                  isLoading={isGeneratingImage}
                  disabled={inviteCode === ''}
                  loadingText="Validating code..."
                  type="submit"
                  mt={6}
                  mb={4}
                >
                  Validate
                </ActionButton>
              </FormControl>
              <Flex align="center" direction="column" mt={4}>
                <Flex>
                  {' '}
                  <Text color="#CDCDCD" align="center">
                    Don‚Äôt have invitation yet? Tell it to the world:
                  </Text>
                </Flex>
                <Flex>
                  <CLink
                    href={socialPostUrls.twitter}
                    color="#CDCDCD"
                    isExternal
                    _active={{}}
                    _focus={{}}
                  >
                    <Button
                      variant="outline"
                      size="sm"
                      _hover={{}}
                      _active={{}}
                      _focus={{}}
                      color="#CDCDCD"
                      mt={2}
                      mx={2}
                      leftIcon={<TwitterIcon fill="#CDCDCD" />}
                    >
                      Twitter
                    </Button>
                  </CLink>
                  <CLink
                    href={socialPostUrls.discord}
                    color="#CDCDCD"
                    isExternal
                    _active={{}}
                    _focus={{}}
                  >
                    <Button
                      variant="outline"
                      size="sm"
                      _hover={{}}
                      _active={{}}
                      _focus={{}}
                      color="#CDCDCD"
                      mt={2}
                      mx={2}
                      leftIcon={<DiscordIcon fill="#CDCDCD" />}
                    >
                      Discord
                    </Button>
                  </CLink>
                  <CLink
                    href={socialPostUrls.reddit}
                    color="#CDCDCD"
                    isExternal
                    _active={{}}
                    _focus={{}}
                  >
                    <Button
                      variant="outline"
                      size="sm"
                      _hover={{}}
                      _active={{}}
                      _focus={{}}
                      color="#CDCDCD"
                      mt={2}
                      mx={2}
                      leftIcon={<RedditIcon fill="#CDCDCD" />}
                    >
                      Reddit
                    </Button>
                  </CLink>
                </Flex>
              </Flex>
            </Flex>
          </ModalBody>
        </ModalContent>
      </Modal>
    </Flex>
  )
}
