service: generate
app: absart
org: julesgoullee
frameworkVersion: '2'
useDotenv: true
plugins:
  - serverless-plugin-typescript

custom:
  stage: ${opt:stage, self:provider.stage}
  stackName: ${self:custom.stage}-${self:service}

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  apiGateway:
    shouldStartNameWithService: true
  stage: dev
  region: us-east-1
  environment:
    QUEUE_TABLE: ${self:service}-${opt:stage, self:provider.stage}

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  #  include:
  #    - include-me.js
  #    - src/serverless/generate/handler.ts
  exclude:
    - node_modules/**
#    - src/**
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  gen:
    name: ${self:custom.stackName}-gen
    handler: ./src/generate/handler.gen
    #    The following are a few example events you can configure
    #    NOTE: Please make sure to change your handler code to work with those events
    #    Check the event documentation for details
    events:
      - http:
          path: /generate
          method: post

    role: generateRole
    memorySize: 256
    timeout: 10
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2
resources:
  Resources:
    DynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "address"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "address"
            KeyType: "HASH"
        TimeToLiveSpecification:
          AttributeName: 'expires'
          Enabled: true
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.QUEUE_TABLE}
    generateRole:
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Action: sts:AssumeRole
              Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
          Version: '2012-10-17'
        Path: /
        Policies:
          - PolicyDocument:
              Statement:
                - Action:
                    - dynamodb:PutItem
                    - dynamodb:GetItem
                  Effect: Allow
                  Resource:
                    - Fn::GetAtt: [ DynamoDbTable, Arn ]
              Version: '2012-10-17'
            PolicyName: ${self:custom.stackName}-generate-generateRole
        RoleName: ${self:custom.stackName}-generate
      Type: AWS::IAM::Role
# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
